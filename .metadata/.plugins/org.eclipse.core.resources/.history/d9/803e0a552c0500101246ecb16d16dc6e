/*
 * cs43l22.c
 *
 *  Created on: Mar 19, 2025
 *      Author: shtuk
 */
#ifndef __CS43L22_H
#define __CS43L22_H

#define SAMPLE_RATE 48000   // 48 kHz sample rate
#define SAMPLE_FREQUENCY 1000 // 1 kHz tone frequency
#define VOLUME 0x7F         // Set volume (max)
#define TONE_DURATION 2     // Duration of the tone in seconds

#define BUFFER_SIZE (SAMPLE_RATE / SAMPLE_FREQUENCY)

int16_t signal_buffer[BUFFER_SIZE];


extern I2C_HandleTypeDef hi2c1;
extern I2S_HandleTypeDef hi2s3;

void generateSignal(void)
{
    for (int i = 0; i < BUFFER_SIZE; i++)
    {
        signal_buffer[i] = (int16_t)(sin(2 * M_PI * SAMPLE_FREQUENCY * i / SAMPLE_RATE) * VOLUME);
    }
}

static void CS43L22_WriteReg(uint8_t reg, uint8_t value) {

	uint8_t data[2] = { reg, value };

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDR, data, 2, HAL_MAX_DELAY);

    if (ret != HAL_OK)
    {
    }
}

static uint8_t CS43L22_ReadReg(uint8_t reg)
{
    uint8_t value;

    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, CS43L22_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);

    if (ret != HAL_OK)
    {
    }

    ret = HAL_I2C_Master_Receive(&hi2c1, CS43L22_I2C_ADDR, &value, 1, HAL_MAX_DELAY);

    if (ret != HAL_OK)
    {
    }

    return value;
}


void CS43L22_Init(void)
{

	// Perform hardware reset
    HAL_GPIO_WritePin(CS43L22_RESET_GPIO, CS43L22_RESET_PIN, GPIO_PIN_RESET);
    HAL_Delay(100);
    HAL_GPIO_WritePin(CS43L22_RESET_GPIO, CS43L22_RESET_PIN, GPIO_PIN_SET);
    HAL_Delay(100);

    // Power on CS43L22 (example)
    CS43L22_WriteReg(POWER_CONTROL_1, 0x01);  // Set power control register to turn on

    //enable right and left headphone
    uint8_t data = 2 << 6;//PDN_HPB[0:1] = 10 (HP-B always on)
    data = 2 << 4;//PDN_HPA[0:1] = 10 (HP-A always on)
    data = 3 << 2;//PDN_SPKB[0:1] = 11 (Speaker B always off)
    data = 3 << 0;//PDN_SPKB[0:1] = 11 (Speaker A always off)

    CS43L22_WriteReg(POWER_CONTROL_2, data);

    // Autodmatic clock detection
    data = 1 << 7;
    CS43L22_WriteReg(CLOCKING_CONTROL, data);

    // Interface control 1
    data = CS43L22_ReadReg(INTERFACE_CONTROL_1);
    data &= (1 << 5); // Clear all bits except bit 5 which is reserved
    data &= ~(1 << 7);  // Slave
    data &= ~(1 << 6);  // Clock polarity: Not inverted
    data &= ~(1 << 4);  // No DSP mode
    data &= ~(1 << 3);  // Left justified, up to 24 bit (default)
    data |= (1 << 2);
    data |=  (3 << 0);  // 16-bit audio word length for I2S interface
    CS43L22_WriteReg(INTERFACE_CONTROL_1,data);

    //Passthrough x Select: Pass A
    data = CS43L22_ReadReg(PASSTHROUGH_A);
    data &= 0xF0;	//Bits 4-7 are reserved;
    data |= (1 << 0); //use AIN1A as source for passthrough
    data |= (1 << 3); //use AIN4A as source for passthrough
    CS43L22_WriteReg(PASSTHROUGH_A,data);

    //Passthrough x Select: Pass B
    data = CS43L22_ReadReg(PASSTHROUGH_B);
    data &= 0xF0;	//Bits 4-7 are reserved;
    data |= (1 << 0); //use AIN1B as source for passthrough
    data |= (1 << 3); //use AIN4B as source for passthrough
    CS43L22_WriteReg(PASSTHROUGH_B,data);

    //Miscellaneous Controls
    data = CS43L22_ReadReg(MISCELLANEOUS_CONTROLS);
    data = 0x02; //ramp up volume to new level
    CS43L22_WriteReg(MISCELLANEOUS_CONTROLS,data);

    //Playback Control 2
    data = CS43L22_ReadReg(PLAYBACK_CONTROL_2);
    data = 0x00;
    CS43L22_WriteReg(PLAYBACK_CONTROL_2,data);

    //Pass through volume
    data = 0x00;
    CS43L22_WriteReg(PASSTHROUGH_VOLUME_A,data);
    CS43L22_WriteReg(PASSTHROUGH_VOLUME_B,data);

    //PCM Volume
    data = 0x00;
    CS43L22_WriteReg(PCM_A_VOLUME,data);
    CS43L22_WriteReg(PCM_B_VOLUME,data);
}

void CS43L22_DeInit(void);
void CS43L22_SetVolumet(uint8_t);
void CS43L22_Mutet(void);
void CS43L22_Startt(void);
void CS43L22_Playt(void);
void CS43L22_Stopt(void);
void CS43L22_EnableRightLeftt(void);








